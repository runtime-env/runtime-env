import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.1169fbc9.js";const h=JSON.parse('{"title":"JSON","description":"","frontmatter":{},"headers":[],"relativePath":"guide/extra-topic/json.md","filePath":"guide/extra-topic/json.md"}'),l={name:"guide/extra-topic/json.md"},p=o(`<h1 id="json" tabindex="-1">JSON <a class="header-anchor" href="#json" aria-label="Permalink to &quot;JSON&quot;">â€‹</a></h1><p>We sometimes want to store some <em>structural data</em> in an environment variable, in which case we can expose the environment variable in another global variable:</p><ol><li><p>Define environment variables:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># .env.example</span></span>
<span class="line"><span style="color:#F97583;">FOO</span><span style="color:#E1E4E8;">=</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># .env.example</span></span>
<span class="line"><span style="color:#D73A49;">FOO</span><span style="color:#24292E;">=</span></span></code></pre></div><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># .env</span></span>
<span class="line"><span style="color:#F97583;">FOO</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&#39;[&quot;BAR&quot;,&quot;BAZ&quot;]&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># .env</span></span>
<span class="line"><span style="color:#D73A49;">FOO</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&#39;[&quot;BAR&quot;,&quot;BAZ&quot;]&#39;</span></span></code></pre></div></li><li><p>Validate, parse, and expose the environment variables:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// json-env.ts</span></span>
<span class="line"><span style="color:#6A737D;">// you could use other tools you like:</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { z } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;zod&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// you could export instead of expose to global it:</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(globalThis, </span><span style="color:#9ECBFF;">&quot;jsonEnv&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  configurable: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  writable: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  value: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    FOO: z.</span><span style="color:#B392F0;">array</span><span style="color:#E1E4E8;">(z.</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.env.</span><span style="color:#79B8FF;">FOO</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// json-env.ts</span></span>
<span class="line"><span style="color:#6A737D;">// you could use other tools you like:</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { z } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;zod&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// you could export instead of expose to global it:</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(globalThis, </span><span style="color:#032F62;">&quot;jsonEnv&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  configurable: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  writable: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  value: {</span></span>
<span class="line"><span style="color:#24292E;">    FOO: z.</span><span style="color:#6F42C1;">array</span><span style="color:#24292E;">(z.</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.env.</span><span style="color:#005CC5;">FOO</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div></li><li><p>(Recommended) Import the <code>json-env.ts</code> at the top of your application, then you can ensure that the rest of your application will have a valid JSON env:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// main.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./json-env.ts&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// main.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./json-env.ts&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div></li><li><p>Then you can use it anywhere:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(jsonEnv.</span><span style="color:#79B8FF;">FOO</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#6A737D;">// &gt; &quot;BAR&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(jsonEnv.</span><span style="color:#005CC5;">FOO</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#6A737D;">// &gt; &quot;BAR&quot;</span></span></code></pre></div></li></ol>`,3),e=[p];function t(c,r,i,y,E,d){return a(),n("div",null,e)}const v=s(l,[["render",t]]);export{h as __pageData,v as default};
